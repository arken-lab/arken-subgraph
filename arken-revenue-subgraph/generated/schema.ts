// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FeeWalletUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeWalletUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeWalletUpdated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeWalletUpdated", id.toString(), this);
    }
  }

  static load(id: string): FeeWalletUpdated | null {
    return changetype<FeeWalletUpdated | null>(
      store.get("FeeWalletUpdated", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newFeeWallet(): Bytes {
    let value = this.get("newFeeWallet");
    return value!.toBytes();
  }

  set newFeeWallet(value: Bytes) {
    this.set("newFeeWallet", Value.fromBytes(value));
  }
}

export class FeeWallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeWallet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeeWallet must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeWallet", id.toString(), this);
    }
  }

  static load(id: string): FeeWallet | null {
    return changetype<FeeWallet | null>(store.get("FeeWallet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feeWalletAddress(): Bytes {
    let value = this.get("feeWalletAddress");
    return value!.toBytes();
  }

  set feeWalletAddress(value: Bytes) {
    this.set("feeWalletAddress", Value.fromBytes(value));
  }
}

export class Revenue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Revenue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Revenue must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Revenue", id.toString(), this);
    }
  }

  static load(id: string): Revenue | null {
    return changetype<Revenue | null>(store.get("Revenue", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amountUsd(): BigDecimal {
    let value = this.get("amountUsd");
    return value!.toBigDecimal();
  }

  set amountUsd(value: BigDecimal) {
    this.set("amountUsd", Value.fromBigDecimal(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }
}

export class DayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DayData", id.toString(), this);
    }
  }

  static load(id: string): DayData | null {
    return changetype<DayData | null>(store.get("DayData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalAmountUsd(): BigDecimal {
    let value = this.get("totalAmountUsd");
    return value!.toBigDecimal();
  }

  set totalAmountUsd(value: BigDecimal) {
    this.set("totalAmountUsd", Value.fromBigDecimal(value));
  }

  get date(): i32 {
    let value = this.get("date");
    return value!.toI32();
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }
}
